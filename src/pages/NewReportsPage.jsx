import React, { useState } from 'react';
import { FaBell, FaUser, FaChartLine, FaDollarSign, FaClipboardList } from 'react-icons/fa';
import { useNavigate } from 'react-router-dom';
import { Line } from 'react-chartjs-2';
import { Chart as ChartJS, LineElement, PointElement, CategoryScale, LinearScale, Tooltip, Legend } from 'chart.js';
import { jsPDF } from 'jspdf'; // Import jsPDF
import '../styles/NewReportsPage.css';

ChartJS.register(LineElement, PointElement, CategoryScale, LinearScale, Tooltip, Legend);

const NewReportsPage = () => {
  const navigate = useNavigate();

  const [showNotifications, setShowNotifications] = useState(false);
  const [notifications, setNotifications] = useState([
    { id: 1, message: 'New report generated', date: '2025-01-16', read: false },
    { id: 2, message: 'Sales report updated', date: '2025-01-15', read: false },
  ]);
  const [systemOnline, setSystemOnline] = useState(true);

  const salesData = {
    labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],
    datasets: [
      {
        label: 'Sales ($)',
        data: [1200, 1900, 3000, 5000, 2300, 3400],
        fill: true,
        backgroundColor: 'rgba(46, 125, 50, 0.1)',
        borderColor: '#2e7d32',
        tension: 0.3,
      },
    ],
  };

  const totalSales = salesData.datasets[0].data.reduce((a, b) => a + b, 0);
  const totalOrders = 120; // Example value
  const averageOrderValue = (totalSales / totalOrders).toFixed(2);

  const handleGenerateReport = () => {
    // Create a new jsPDF instance
    const doc = new jsPDF();

    // Add title
    doc.setFontSize(20);
    doc.text('Sales Report', 20, 20);

    // Add summary
    doc.setFontSize(12);
    doc.text(`Generated on: ${new Date().toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}`, 20, 30);
    doc.text(`Total Sales: $${totalSales}`, 20, 40);
    doc.text(`Total Orders: ${totalOrders}`, 20, 50);
    doc.text(`Average Order Value: $${averageOrderValue}`, 20, 60);

    // Add sales data table
    doc.setFontSize(14);
    doc.text('Sales Data (Last 6 Months)', 20, 80);

    doc.setFontSize(10);
    let yPosition = 90;
    salesData.labels.forEach((label, index) => {
      doc.text(`${label}: $${salesData.datasets[0].data[index]}`, 20, yPosition);
      yPosition += 10;
    });

    // Add footer
    doc.setFontSize(8);
    doc.text('Generated by Your App Name', 20, doc.internal.pageSize.height - 10);

    // Download the PDF
    doc.save('sales_report.pdf');

    // Add notification
    setNotifications([
      ...notifications,
      {
        id: Date.now(),
        message: 'Sales report generated and downloaded',
        date: new Date().toISOString().split('T')[0],
        read: false,
      },
    ]);
  };

  const handleNotificationClick = () => {
    if (!showNotifications) {
      const updatedNotifications = notifications.map(n => ({ ...n, read: true }));
      setNotifications(updatedNotifications);
    }
    setShowNotifications(!showNotifications);
  };

  const handleSystemToggle = () => {
    setSystemOnline(!systemOnline);
    setNotifications([
      ...notifications,
      {
        id: Date.now(),
        message: `System is now ${systemOnline ? 'offline' : 'online'}`,
        date: new Date().toISOString().split('T')[0],
        read: false,
      },
    ]);
  };

  const unreadNotificationsCount = notifications.filter(n => !n.read).length;

  return (
    <div className="new-reports-page">
      {/* Header */}
      <header className="new-reports-header">
        <div className="new-reports-header-top">
          <div className="new-reports-logo">LOGO</div>
          <nav className="new-reports-header-nav">
            <button className="new-reports-nav-item" onClick={() => navigate('/dashboard')}>
              Dashboard
            </button>
            <button className="new-reports-nav-item" onClick={() => navigate('/new-orders')}>
              Orders
            </button>
            <button className="new-reports-nav-item" onClick={() => navigate('/new-deliveries')}>
              Deliveries
            </button>
            <button className="new-reports-nav-item active">Reports</button>
          </nav>
          <div className="new-reports-header-actions">
            <div className="header-top-item">
              <div className="new-reports-notification" onClick={handleNotificationClick}>
                <FaBell className="new-reports-header-icon" />
                {unreadNotificationsCount > 0 && (
                  <span className="new-reports-badge">{unreadNotificationsCount}</span>
                )}
              </div>
              {showNotifications && (
                <div className="new-reports-notification-dropdown">
                  <h4>Notifications</h4>
                  {notifications.length > 0 ? (
                    notifications.map(notification => (
                      <div key={notification.id} className="new-reports-notification-item">
                        <p>{notification.message}</p>
                        <span>{notification.date}</span>
                      </div>
                    ))
                  ) : (
                    <p>No notifications</p>
                  )}
                </div>
              )}
            </div>
            <div className="header-top-item">
              <div className="new-reports-user-profile">
                <img src="src/assets/ kumariImage.jpg" alt="User" />
              </div>
            </div>
          </div>
        </div>
      </header>

      {/* Reports Section */}
      <div className="new-reports-section">
        <div className="new-reports-section-header">
          <div>
            <h1>Reports</h1>
            <p>View and manage all reports in one place</p>
          </div>
          <div className="new-reports-section-actions">
            <button className="new-reports-generate-btn" onClick={handleGenerateReport}>
              Generate Report
            </button>
          </div>
        </div>

        {/* Report Summary Cards */}
        <div className="new-reports-summary-cards">
          <div className="new-reports-card">
            <div className="new-reports-card-icon">
              <FaDollarSign />
            </div>
            <div className="new-reports-card-content">
              <h3>Total Sales</h3>
              <p>${totalSales}</p>
            </div>
          </div>
          <div className="new-reports-card">
            <div className="new-reports-card-icon">
              <FaClipboardList />
            </div>
            <div className="new-reports-card-content">
              <h3>Total Orders</h3>
              <p>{totalOrders}</p>
            </div>
          </div>
          <div className="new-reports-card">
            <div className="new-reports-card-icon">
              <FaChartLine />
            </div>
            <div className="new-reports-card-content">
              <h3>Average Order Value</h3>
              <p>${averageOrderValue}</p>
            </div>
          </div>
        </div>

        {/* Sales Report Chart */}
        <div className="new-reports-chart">
          <h3>Sales Report (Last 6 Months)</h3>
          <Line
            data={salesData}
            options={{
              maintainAspectRatio: false,
              plugins: {
                legend: { display: true },
              },
              scales: {
                x: { grid: { display: false } },
                y: { grid: { color: '#e0e0e0' } },
              },
            }}
          />
        </div>
      </div>

      {/* System Status */}
      <div className="new-reports-system-status" onClick={handleSystemToggle}>
        <span className={`new-reports-status-indicator ${systemOnline ? 'online' : 'offline'}`}></span>
        <p>{systemOnline ? 'System Online' : 'System Offline'}</p>
      </div>
    </div>
  );
};

export default NewReportsPage;